desc "Enable Under Construction status"
task :enable_under_construction do
	on roles(:web) do
		if fetch(:this_host_last_release)
    		# Previous release exists, update it to under construction
			execute "if [ -f #{releases_path}/#{fetch(:this_host_last_release)}/vendor/grrr-amsterdam/garp3/scripts/garp.php ]; then php #{releases_path}/#{fetch(:this_host_last_release)}/vendor/grrr-amsterdam/garp3/scripts/garp.php Env setUnderConstruction --e=#{fetch(:stage)}; fi"
		end
	end
end

desc "Disable Under Construction status"
task :disable_under_construction do
	on roles(:web) do
		if fetch(:this_host_last_release)
			# Previous release exists, remove under construction flag
			execute "if [ -f #{releases_path}/#{fetch(:this_host_last_release)}/vendor/grrr-amsterdam/garp3/scripts/garp.php ]; then php #{releases_path}/#{fetch(:this_host_last_release)}/vendor/grrr-amsterdam/garp3/scripts/garp.php Env setUnderConstruction false --e=#{fetch(:stage)}; fi"
		end
	end
end

desc "Notify Slack"
task :notify_slack do
    on roles(:app) do
        within release_path do
            # Work in progress: might be fun to add git message / revision at some point
            # --git-msg=\"#{git log --format=oneline -n 1 HEAD#}\"
            # --git-rev=#{capture("cd #{repo_path} && git rev-parse --short HEAD")}
            execute "php #{release_path}/vendor/grrr-amsterdam/garp3/scripts/garp.php Slack sendDeployNotification --branch=#{fetch(:branch)} --user=#{fetch(:local_user)} --e=#{fetch(:stage)}"
        end
    end
end

desc "Spawn models"
task :spawn do
	# Since there is often a shared database server for multiple web servers,
	# we distinguish a primary server (with roles 'web' and 'app'),
	# and secondary servers (with just role 'web').
	# Only the primary server Spawns database changes, to prevent
	# race conditions and multiple clients simultaneously trying to update
	# the same tables and views.
	on roles(:app) do
		execute "php #{release_path}/vendor/grrr-amsterdam/garp3/scripts/garp.php Spawn --only=db -b --e=#{fetch(:stage)}"
	end

	on roles(:web) do
		execute "php #{release_path}/vendor/grrr-amsterdam/garp3/scripts/garp.php Spawn --only=files -b --e=#{fetch(:stage)}"
		execute "php #{release_path}/vendor/grrr-amsterdam/garp3/scripts/garp.php cache clear --e=#{fetch(:stage)}"
	end
end

desc "Perform administrative tasks after deploy"
task :garp_env_setup do
	on roles(:app) do
		execute "php #{release_path}/vendor/grrr-amsterdam/garp3/scripts/garp.php Env setup --e=#{fetch(:stage)}"
	end
end

desc "Install composer dependencies"
task :composer_install do
    on roles(:web) do
        composerPharPath = "#{deploy_to}/shared/composer.phar"
        execute "if [ -f #{composerPharPath} ]; then php #{composerPharPath} install -d #{release_path} --no-dev; fi"
    end
end

