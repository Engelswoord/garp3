<?php
	$fields = $this->model->fields->getFields();
	$relFields = $this->model->fields->getFields('origin', 'relation');
	$editableFields = $this->model->fields->getFields('editable', true);
	$singularRelations = $this->model->relations->getRelations('type', array('hasOne', 'belongsTo'));
	$multipleRelations = $this->model->relations->getRelations('type', array('hasMany', 'hasAndBelongsToMany'));

	$dashedModelId = Garp_Model_Spawn_Util::camelcased2dashed($this->model->id);
	$rolesThatShouldntSeeThisModelInTheirMenu = $this->spawnJs()->getAclRolesThatAreNotAllowedModelPrivilege($this->model, 'menu');

?>Ext.ns('Garp.dataTypes');
Garp.dataTypes.<?php echo $this->model->id ?> = new Garp.DataType({
	text: '<?php echo $this->model->label ?>',
	<?php if ($this->model->description): ?>
	description: '<?php echo $this->escape($this->model->description) ?>',
	<?php endif; ?>
	iconCls: 'icon-<?php echo $dashedModelId ?>',
	quickCreatable: <?php echo $this->model->quickAddable ? 'true' : 'false' ?>,
	<?php if (!$this->model->visible): ?>
	hidden: true,
	<?php elseif ($rolesThatShouldntSeeThisModelInTheirMenu): ?>hidden: ['<?php
		echo implode("','", $rolesThatShouldntSeeThisModelInTheirMenu) ?>'].indexOf(Garp.localUser.role) > -1,
	<?php endif; ?>
	<?php if (!$this->model->creatable): ?>
	disableCreate: true,
	<?php endif; ?>
	<?php if (!$this->model->deletable): ?>
	disableDelete: true,
	<?php endif; ?>
	
	metaPanelItems: [
		'created', 'modified'
		<?php /*@todo: */?>
	],

	<?php /* _____DisplayField */ ?>
	displayFieldRenderer: function(rec){
	<?php if ($this->model->fields->exists('name')): ?>
		return rec.get('name') || __('New');
	<?php elseif (
		$this->model->fields->exists('first_name') &&
		$this->model->fields->exists('last_name_prefix') &&
		$this->model->fields->exists('last_name')
	): ?>
		return rec.get('first_name') ? (rec.get('first_name') + (rec.get('last_name_prefix') ? ' ' + rec.get('last_name_prefix') + ' ' : ' ') + (rec.get('last_name') || '')) : __('New');	
	<?php else: ?>
		return [rec.get("<?php echo implode($this->model->fields->listFieldNames, '"), rec.get("') ?>")].join(" ").replace("  ", " ") || __("New");
	<?php endif; ?>
	},
	<?php /* _____PreviewLink */
	if ($this->model->route):
		$route = $this->model->route;
		if ($route[0] === '/'):
			$route = substr($route, 1);
		endif;
		$urlParam = null;			
		$routeParts = explode("/", $route);

		foreach ($routeParts as &$part) {
			if (
				strlen($part) > 0 &&
				$part[0] === ':'
			) {
				$urlParam = substr($part, 1);
				$part = '{0}';
			}
		}

	?>
	previewLink: {
		urlTpl: '<?php echo implode("/", $routeParts) ?>?preview',
		param: '<?php echo $urlParam ?>'
	},
	<?php endif;

	/* _____DefaultData */
	$i = 0;
	?>
	defaultData: {
	<?php 
	foreach ($fields as $field): ?>
		
		'<?php echo $field->name ?>': <?php echo $this->spawnJs()->getDefaultValue($field); echo ($i < (count($fields) - 1) ? ',' : ''); ?>
		<?php
		$i++;
	endforeach;
	?>
	},

	<?php
		/* _____SortInfo */	
		$sortParams = $this->spawnJs()->getSortParams($this->model->order);
	?>
	sortInfo: {
		field: '<?php echo $sortParams['field'] ?>',
		direction: '<?php echo $sortParams['direction'] ?>'
	},

	<?php
		/* _____ColumnModel */
		$columnModelNodes = array();
	?>
	columnModel: [{
	<?php
		/* __images in column model */
		foreach ($fields as $field):
			if ($this->spawnJs()->isImageField($field, $this->model)):
				$lcFieldName = strtolower($field->name);
				$nodeParams = array(
					'dataIndex' => $lcFieldName,
					'renderer' => 'Garp.renderers.imageRelationRenderer',
					'width' => 84,
					'fixed' => true,
					'header' => ($field->name === 'image_id' ? 'Image' : $field->label),
					'searchable' => false
				);
				if (
					!$this->spawnJs()->isListField($field->name, $this->model) &&
					!$field->visible
				):
					$nodeParams['hidden'] = true;
				endif;
				$columnModelNodes[] = $this->partial('partials/spawn/js/column-model-entry.phtml', 'g', $nodeParams);
			endif;
		endforeach;

		/* __textual columns */
		foreach ($fields as $field):
			$isSingularRelationField = $this->spawnJs()->isSingularRelationField($field, $this->model);
			$lcFieldName = strtolower($field->name);
			
			if (!$this->spawnJs()->isImageField($field, $this->model)):
				$nodeParams = array(
					'dataIndex' => $lcFieldName,
					'header' => $field->label
				);

				switch ($field->type ):
					case 'datetime':
						$nodeParams['renderer'] = 'Garp.renderers.dateTimeRenderer';
					break;
					case 'date':
						$nodeParams['renderer'] = 'Garp.renderers.dateRenderer';
					break;
					case 'time':
						$nodeParams['renderer'] = 'Garp.renderers.timeRenderer';
					break;
					case 'html':
						$nodeParams['renderer'] = 'Garp.renderers.htmlRenderer';
						$nodeParams['searchable'] = true;
					break;
					case 'enum':
						if (is_array($field->options) && key($field->options) !== 0):
							$labeledEnumOptions = array();
							foreach ($field->options as $value => $label):
								$labeledEnumOptions[] = "'{$value}': __('{$label}')";
							endforeach;

							$nodeParams['renderer'] = "function(v) { return {".implode($labeledEnumOptions, ", ")."}[v] || '-';}";
						endif;
					break;
					case 'checkbox':
						$nodeParams['renderer'] = 'Garp.renderers.checkboxRenderer';
					break;
					default:
						if ($isSingularRelationField) {
							$nodeParams['searchable'] = false;
							$nodeParams['sortable'] = false;
						}

						switch ($field->type) {
							case 'text':
							case 'email':
								$nodeParams['searchable'] = true;
						}
				endswitch;

				if (
					!$this->spawnJs()->isListField($field->name, $this->model) ||
					!$field->visible ||
					(
						$this->spawnJs()->modelHasFirstAndLastName($this->model) &&
						(
							$field->name === 'first_name' ||
							$field->name === 'last_name_prefix' ||
							$field->name === 'last_name'
						)

					)
				):
					$nodeParams['hidden'] = true;
				endif;

				// @todo: 	dit is wat overbodig, maar komt door het conflict tussen listField en visible.
				//			heeft ook te maken met editable vs visible, dat sowieso nog opgelost moet worden.
				if ($this->spawnJs()->isListField($field->name, $this->model)) {
					unset($nodeParams['hidden']);
				}

				if ($isSingularRelationField) {
					$nodeParams['headerPostFix'] = ' id';
					$nodeParams['hideable'] = false;
				}
				$columnModelNodes[] = $this->partial('partials/spawn/js/column-model-entry.phtml', 'g', $nodeParams);

				//	create an extra column model entry for relation fields
				if ($isSingularRelationField):
					$relations = $this->model->relations->getRelations('column', $field->name);
					$relModelName = key($relations);
					$lcRelModelName = strtolower($relModelName);

					$columnModelNodes[] = $this->partial('partials/spawn/js/column-model-entry.phtml', 'g', array(
						'dataIndex' => $lcRelModelName,
						'header' => $relModelName,
						'hidden' => true,
						'sortable' => true,
						'searchable' => true
					));
				endif;
			endif;
		endforeach;

		if ($this->spawnJs()->modelHasFirstAndLastName($this->model)):
			$columnModelNodes[] = $this->partial('partials/spawn/js/column-model-entry.phtml', 'g', array(
				'dataIndex' => 'fullname',
				'header' => 'Full name',
				'virtual' => true,
				'convert' => 'Garp.renderers.fullNameConverter',
				'virtualSortField' => 'first_name',
				'hidden' => true
			));
		endif;
		
		/* Article / Chapter behavior */
		if ($this->model->behaviors->displaysBehavior('Article')):
			$columnModelNodes[] = $this->partial('partials/spawn/js/column-model-entry.phtml', 'g', array(
				'dataIndex' => 'chapters',
				'hidden' => true,
				'visible' => false
			));
		endif;
		

		if ($columnModelNodes):
			echo implode("}, {", $columnModelNodes);
		endif;
	?>
	}],
	<?php /* _____FormConfig */ ?>
	formConfig: [{
		layout: 'form',
		defaults: {
			defaultType: 'textfield'
		},
		<?php
		if (
			count($singularRelations) ||
			$this->model->behaviors->displaysBehavior('Locatable')
		): ?>
		listeners: {
			loaddata: function(rec, formPanel){
		<?php
			if (count($singularRelations)):
				$singularImageRelations = array_filter($singularRelations, function ($n) {return $n->model === 'Image';});
				foreach ($singularImageRelations as $imageRelation):
					$imagePreviewId = $this->spawnJs()->getImagePreviewId($imageRelation->column);
				?>
				formPanel.<?php echo $imagePreviewId ?>.setText(Garp.renderers.imageRelationRenderer(rec.get('<?php echo $imageRelation->column ?>'), null, rec) || __('Add image'));
				<?php
				endforeach;
			endif;

			if ($this->model->behaviors->displaysBehavior('Locatable')): ?>
				var lat = formPanel.getForm().findField('location_lat');
				var lng = formPanel.getForm().findField('location_long');
				var address = formPanel.formcontent['location_address'];

				function updateAddress(){
					var geocoder = new google.maps.Geocoder();
					if (lat.getValue() && lng.getValue()) {
						//address.update(__('Searching location...'));

						geocoder.geocode({
							'latLng': new google.maps.LatLng(lat.getValue(), lng.getValue())
						}, function(results, status){
							if (status == google.maps.GeocoderStatus.OK) {
								if (results[0]) {
									address.update(Garp.renderers.geocodeAddressRenderer(results[0]));
									//address.update(results[0].formatted_address);
								} else {
									address.update(__('Location set, but unknown'));
								}
							} else if (status == google.maps.GeocoderStatus.ZERO_RESULTS){
								address.update(__('Location set, but unknown'));
							} else {
								address.update(__('Unknown error occurred.'));
							}
						});
					} else {
						address.update(__('No location specified'));
					}
				}

				if (typeof google == 'undefined') {
					Garp.lazyLoad('http://maps.googleapis.com/maps/api/js?sensor=false', updateAddress);
				} else {
					updateAddress();
				}
				lat.on('change', updateAddress);
			<?php endif; ?>
			}
		},
		<?php
		endif; ?>
		items: [{
			xtype: "fieldset",
			items: [{
		<?php
		$formFields = array();

		/* _____ID Field */
		$idField = $this->model->fields->getFields('name', 'id');
		if (count($idField)) {
			$formFields[] = $this->partial('partials/spawn/js/input-field.phtml', 'g', array(
				'field' => current($idField)
			));
		}

		/* _____Image Fields */
		foreach ($singularRelations as $rel):
			if ($rel->model === 'Image'):
				$formFields[] = $this->partial('partials/spawn/js/image-field.phtml', 'g', array(
					'relation' => $rel,
					'modelSet' => $this->modelSet
				));
			endif;
		endforeach;

		/* _____Geo Location Fields */
		if ($this->model->behaviors->displaysBehavior('Locatable')) {
			$formFields[] = $this->partial('partials/spawn/js/geolocation-field.phtml', 'g', array(
				'model' => $this->model
			));
		}
		
		/* _____InputFields */
		foreach ($editableFields as $field) {
			if (!in_array($field->name, $this->spawnJs()->getExcludedFormFields()))
				$formFields[] = $this->partial('partials/spawn/js/input-field.phtml', 'g', array(
					'field' => $field
				));
		}
		
		/* _____Chapter / Article Fields */
		if ($this->model->behaviors->displaysBehavior('Article')) {
			$formFields[] = $this->partial('partials/spawn/js/article-field.phtml', 'g');
		}


		/* _____Single Relation Fields */
		foreach ($singularRelations as $rel) {
			if (
				$rel->model !== 'Image' &&
				$rel->column !== 'author_id' &&
				$rel->column !== 'modifier_id'
			) {
				$formFields[] = $this->partial('partials/spawn/js/singular-relation-field.phtml', 'g', array(
					'relation' => $rel,
					'modelSet' => $this->modelSet
				));
			}
		}
		
		echo implode("\n\t\t\t}, {\n", $formFields)."\n";
?>
			}]
		}]
<?php
		if (count($multipleRelations)):
			$multiRelFields = array();

			foreach ($multipleRelations as $rel):
				if ( $rel->isPlural() &&
					(!
						($rel->model === 'Chapter' && $this->model->behaviors->displaysBehavior('Article'))
					)
				):
					$multiRelFields[] = $this->partial('partials/spawn/js/multiple-relation-field.phtml', 'g', array(
						'relation' => $rel,
						'modelId' => $this->model->id
					));
				endif;
			endforeach;

			if ($multiRelFields): ?>
	}, {
<?php
				echo implode("\t}, {", $multiRelFields);
			endif;
		endif;
?>
	}]
});