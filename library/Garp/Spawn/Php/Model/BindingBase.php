<?php
/**
 * Generated PHP model
 * @author David Spreekmeester | grrr.nl
 * @package Garp
 * @subpackage Spawn
 */
class Garp_Spawn_Php_Model_BindingBase extends Garp_Spawn_Php_Model_Abstract {
	const MODEL_DIR = '/modules/default/models/Base/';

	protected $_behaviorsThatRequireParams = array('Weighable');

	/**
	 * @var	Garp_Spawn_Relation $_relation The accompanying HasAndBelongsToMany relation
	 */
	protected $_relation;


	public function isOverwriteEnabled() {
		return true;
	}

	/**
	 * @param Garp_Spawn_Model_Base $model 		The base model this habtm model is connected to
	 * @param Garp_Spawn_Relation 	$relation	The accompanying HasAndBelongsToMany relation
	 */
	public function __construct(Garp_Spawn_Model_Base $model, Garp_Spawn_Relation $habtmRelation) {
		parent::__construct($model);
		
		$this->setRelation($habtmRelation);
	}

	public function getPath() {
		$relation		= $this->getRelation();
		$bindingModel	= $relation->getBindingModel();
		
		return APPLICATION_PATH . self::MODEL_DIR . $bindingModel->id . '.php';
	}
		
	public function render() {
		$modelId1		= $this->getModel()->id;
		$modelId2 		= $this->_getRemoteModelId();
		$relation		= $this->getRelation();
		$bindingModel	= $relation->getBindingModel();
		$table 			= $this->_getBindingModelTable();
		$isHomophile 	= $this->_isHomophile();
		
		$modelColumn1 	= $this->_getRelationColumnName($modelId1, 1);
		$modelColumn2 	= $this->_getRelationColumnName($modelId2, 2);

		$alphabeticModelIds = array($modelId1, $modelId2);
		sort($alphabeticModelIds);
		$alphabeticModelColumns = $alphabeticModelIds[0] === $modelId1 ?
			array($modelColumn1, $modelColumn2) :
			array($modelColumn2, $modelColumn1)
		;

		$out = $this->_rl('<?php');
		$out.= $this->_rl('/* This file was generated by '. get_class() .' - do not edit */');
		$out.= $this->_rl("class Model_Base_{$bindingModel->id} extends Garp_Model_Db {");

		$out.= $this->_rl("protected \$_name = '{$table->name}';", 1, 2);

		$out.= $this->_rl("protected \$_bindable = array('Model_{$alphabeticModelIds[0]}'"
			.(!$isHomophile ? ", 'Model_{$alphabeticModelIds[1]}'" : '')
			.");", 1, 2)
		;

		$out.= $this->_rl('protected $_referenceMap = array(', 1);
		$out.= $this->_rl("'{$alphabeticModelIds[0]}".($isHomophile ? '1' : '')."' => array(", 2);
		$out.= $this->_rl("'columns' => '{$alphabeticModelColumns[0]}',", 3);
		$out.= $this->_rl("'refTableClass' => 'Model_{$alphabeticModelIds[0]}',", 3);
		$out.= $this->_rl("'refColumns' => 'id'", 3);
		$out.= $this->_rl("),", 2);

		$out.= $this->_rl("'{$alphabeticModelIds[1]}".($isHomophile ? '2' : '')."' => array(", 2);
		$out.= $this->_rl("'columns' => '{$alphabeticModelColumns[1]}',", 3);
		$out.= $this->_rl("'refTableClass' => 'Model_{$alphabeticModelIds[1]}',", 3);
		$out.= $this->_rl("'refColumns' => 'id'", 3);
		$out.= $this->_rl(")", 2);
		$out.= $this->_rl(");", 1, 2);

		$out.= $this->_rl("public function init() {", 1);
		$out.= $this->_rl("parent::init();", 2);

		if ($relation->weighable) {
			$out .= $this->_renderWeighableScript();
		}
		
		$out.= $this->_rl("}", 1);

		$out.= $this->_rl("}", 0);

		return $out;
	}

	/**
	 * @return Garp_Spawn_Relation
	 */
	public function getRelation() {
		return $this->_relation;
	}
	
	/**
	 * @param Garp_Spawn_Relation $relation
	 */
	public function setRelation($relation) {
		$this->_relation = $relation;
	}

	protected function _renderWeighableScript() {
		$isHomophile 	= $this->_isHomophile();

		$thisModelId 	= $this->getModel()->id;
		$thatModelId 	= $this->_getRemoteModelId();

		$weightColumn1 	= $this->_getWeightColumnName($thisModelId, $thatModelId, 1);
		$weightColumn2 	= $this->_getWeightColumnName($thatModelId, $thisModelId, 2);
		
		$modelColumn1 	= $this->_getRelationColumnName($thisModelId, 1);
		$modelColumn2 	= $this->_getRelationColumnName($thatModelId, 2);		

		$thisPostFix 	= $this->_getModelPostFix($thisModelId, 1);
		$thatPostFix 	= $this->_getModelPostFix($thatModelId, 2);

		$out = 
			  "\n"
			. $this->_rl("\$this->registerObserver(new Garp_Model_Behavior_Weighable(array(", 2)
			. $this->_rl("'{$thisModelId}{$thisPostFix}' => array(", 3)
			. $this->_rl("'foreignKeyColumn' => '{$modelColumn1}',", 4)
			. $this->_rl("'weightColumn' => '{$weightColumn1}'", 4)
			. $this->_rl("),", 3)
			. $this->_rl("'{$thatModelId}{$thatPostFix}' => array(", 3)
			. $this->_rl("'foreignKeyColumn' => '{$modelColumn2}',", 4)
			. $this->_rl("'weightColumn' => '{$weightColumn2}'", 4)
			. $this->_rl(")", 3)
			. $this->_rl(")));", 2, 1)
		;
		
		return $out;
	}
	
	protected function _getRelationColumnName($modelId, $iterator) {
		$postfix 		= $this->_getModelPostFix($modelId, $iterator);
		$isHomophile 	= $this->_isHomophile();
		$column 		= Garp_Spawn_Relation_Set::getRelationColumn($modelId, $postfix);
		
		return $column;
	}
	
	protected function _getWeightColumnName($thisModelId, $thatModelId, $iterator) {
		$thisNamespace 		= $this->_getModelNamespace($thisModelId);
		$thatNamespace		= $this->_getModelNamespace($thatModelId);
		
		$thisPostFix 		= $this->_getModelPostFix($thisModelId, $iterator === 1 ? 1 : 2);
		$thatPostFix 		= $this->_getModelPostFix($thatModelId, $iterator === 1 ? 2 : 1);

		$combinedColumn 	= "{$thisNamespace}{$thisPostFix}_{$thatNamespace}{$thatPostFix}_weight";

		return $combinedColumn;
	}
	
	/**
	 * @return	String	The model namespace, to be used in front of a column name, i.e. blog_post
	 */
	protected function _getModelNamespace($modelId) {
		$modelNamespace = Garp_Spawn_Util::camelcased2underscored($modelId);
		return $modelNamespace;
	}
	
	/**
	 * @return String	In case of a homophile relation, returns '1' for the base model, and '2' for the remote model.
	 */
	protected function _getModelPostFix($modelId, $iterator) {
		if (!$this->_isHomophile()) {
			return;
		}

		$model 		= $this->getModel();		
		$postfix 	= $iterator;

		return $postfix;
	}

	protected function _getBindingModelTable() {
		$bindingModel	= $this->getRelation()->getBindingModel();
		$tableFactory 	= new Garp_Spawn_MySql_Table_Factory($bindingModel);
		$table 			= $tableFactory->produceConfigTable();
	
		return $table;
	}

	protected function _getRemoteModelId() {
		$relation 		= $this->getRelation();
		$remoteModelId 	= $relation->model;
	
		return $remoteModelId;
	}

	protected function _isHomophile() {
		$model			= $this->getModel();
		$remoteModelId	= $this->_getRemoteModelId();
		$isHomophile 	= $model->id === $remoteModelId;
	
		return $isHomophile;
	}
}
