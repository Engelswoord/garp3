<?php
/**
 * Generated PHP model
 * @author David Spreekmeester | grrr.nl
 * @modifiedby $LastChangedBy: $
 * @version $Revision: $
 * @package Garp
 * @subpackage Model
 * @lastmodified $Date: $
 */
class Garp_Model_Spawn_Php_Renderer {
	protected $_model;

	const _BASE_MODEL_PATH = '/modules/default/models/Base/';
	const _EXTENDED_MODEL_PATH = '/modules/default/models/';


	public function __construct(Garp_Model_Spawn_Model $model) {
		$this->_model = $model;
	}


	public function save() {
		$indent = '        ';

		//	generate base model
		$baseModelPath = $this->_getBaseModelPath($this->_model->id);
		$baseModelContent = $this->_renderBaseModel();
		$this->_saveFile($baseModelPath, $baseModelContent, 'PHP base model', true);

		//	generate extended model
		$extendedModelPath = $this->_getExtendedModelPath($this->_model->id);
		$extendedModelContent = $this->_renderExtendedModel($this->_model->id);
		$this->_saveFile($extendedModelPath, $extendedModelContent, 'PHP extended model', false);

		//	generate hasAndBelongsToMany binding models that relate to this model
		$habtmRelations = $this->_model->relations->getRelations('type', 'hasAndBelongsToMany');
		if ($habtmRelations) {
			foreach ($habtmRelations as $habtmRelation) {
				$bindingModelName = Garp_Model_Spawn_Relations::getBindingModelName($habtmRelation->model, $this->_model->id);
				$bindingBaseModelPath = $this->_getBaseModelPath($bindingModelName);
				$bindingBaseModelContent = $this->_renderBindingBaseModel($bindingModelName, $this->_model->id, $habtmRelation->model);
				$this->_saveFile($bindingBaseModelPath, $bindingBaseModelContent, 'PHP base binding model to '.$habtmRelation->model, true);
				
				$bindingExtendedModelPath = $this->_getExtendedModelPath($bindingModelName);
				$bindingExtendedModelContent = $this->_renderExtendedModel($bindingModelName);
				$this->_saveFile($bindingExtendedModelPath, $bindingExtendedModelContent, 'PHP extended binding model to '.$habtmRelation->model, false);
			}
		} else p("  No hasAndBelongsToMany relations.");
		
		new Garp_Model_Spawn_Php_ModelsIncluder($this->_model->id);
	}
	
	
	protected function _saveFile($path, $content, $label, $overwrite = false) {
		if (
			$overwrite ||
			!$overwrite && !file_exists($path)
		) {
			if (file_put_contents($path, $content)) {
				p("âˆš {$label} generated.");
			} else {
				throw new Exception("Could not generate {$label}.");
			}
		} else p("  {$label} exists.");
	}


	protected static function _getBaseModelPath($modelId) {
		return APPLICATION_PATH.self::_BASE_MODEL_PATH.$modelId.'.php';
	}
	
	
	protected static function _getExtendedModelPath($modelId) {
		return APPLICATION_PATH.self::_EXTENDED_MODEL_PATH.$modelId.'.php';
	}


	protected function _renderBaseModel() {
		$out = $this->_rl("<?php");
		$out.= $this->_rl('/* This file was generated by '.get_class().' */');

		$extendsFrom = $this->_model->module === 'garp' ? 'G_Model_'.$this->_model->id : 'Garp_Model_Db';
		$out.= $this->_rl("class Model_Base_{$this->_model->id} extends {$extendsFrom} {");

		/* Table */
		$out.= $this->_rl("protected \$_name = '{$this->_model->id}';", 1, 2);

		/* Default order */
		$orderStatement = (
			strpos($this->_model->order, ",") !== false &&
			strpos($this->_model->order, "(") === false) ?
			Garp_Model_Spawn_Util::array2phpStatement(explode(", ", $this->_model->order)) :
			"'".$this->_model->order."'";
		$out.= $this->_rl("protected \$_defaultOrder = {$orderStatement};", 1, 2);

		/* Relations */
		$relations = $this->_model->relations->getRelations();

		if (count($relations)) {
			/* Bindable */
			$i = 0;
			$out.= $this->_rl('protected $_bindable = array(', 1);
			$relCount = count($relations);
		
			foreach ($relations as $relationName => $relation) {
				$out.= $this->_rl("'Model_{$relation->model}'".($i !== ($relCount -1) ? ',' : ''), 2);
				$i++;
			}
			$out.= $this->_rl(');', 1, 2);
		

			/* ReferenceMap */
			$i = 0;
			$out.= $this->_rl('protected $_referenceMap = array(', 1);
		
			foreach ($relations as $relationName => $relation) {
				if (
					$relation->type === 'hasOne' ||
					$relation->type === 'belongsTo'
				) {
					$out.= $this->_rl("'{$relationName}' => array(", 2);
					$out.= $this->_rl("'refTableClass' => 'Model_{$relation->model}',", 3);
					$out.= $this->_rl("'columns' => '{$relation->column}',", 3);
					$out.= $this->_rl("'refColumns' => 'id'", 3);
					$out.= $this->_rl(")".($i !== ($relCount -1) ? ',' : ''), 2);
					$i++;
				}
			}
		
			$out.= $this->_rl(');', 1, 3);
		}

		/* Default behaviors */
		$out.= $this->_rl("public function init() {", 1);
		$behaviors = $this->_model->behaviors->getBehaviors();
		foreach ($behaviors as $behavior) {
			$out.= $this->_rl($this->_renderBehavior($behavior), 2);
		}
		$out.= $this->_rl('parent::init();', 2);
		$out.= $this->_rl('}', 1, 1);

		$out.= $this->_rl('}', 0, 0);
		return $out;
	}
	

	protected function _renderExtendedModel($modelId) {
		$out = $this->_rl("<?php");
		$out.= $this->_rl("class Model_{$modelId} extends Model_Base_{$modelId} {", 0);
		$out.= $this->_rl("public function init() {", 1);
		$out.= $this->_rl('parent::init();', 2);
		$out.= $this->_rl('}', 1);
		$out.= $this->_rl("}", 0, 0);
		return $out;
	}
	
	
	protected function _renderBindingBaseModel($bindingModelName, $modelId1, $modelId2) {
		$tableName = Garp_Model_Spawn_MySql_Table::getBindingModelTableName($bindingModelName);
		$modelColumn1 = Garp_Model_Spawn_Relations::getRelationColumn($modelId1, $modelId1 === $modelId2 ? 1 : null);
		$modelColumn2 = Garp_Model_Spawn_Relations::getRelationColumn($modelId2, $modelId1 === $modelId2 ? 2 : null);

		$out = $this->_rl('<?php');
		$out.= $this->_rl('/* This file was generated by '.get_class().' */');
		$out.= $this->_rl("class Model_Base_{$bindingModelName} extends Garp_Model_Db {");

		$out.= $this->_rl("protected \$_name = '{$tableName}';", 1, 2);

		$out.= $this->_rl("protected \$_bindable = array('Model_{$modelId1}', 'Model_{$modelId2}');", 1, 2);

		$out.= $this->_rl('protected $_referenceMap = array(', 1);
		$out.= $this->_rl("'{$modelId1}' => array(", 2);
		$out.= $this->_rl("'columns' => '{$modelColumn1}',", 3);
		$out.= $this->_rl("'refTableClass' => 'Model_{$modelId1}',", 3);
		$out.= $this->_rl("'refColumns' => 'id'", 3);
		$out.= $this->_rl("),", 2);

		$out.= $this->_rl("'{$modelId2}' => array(", 2);
		$out.= $this->_rl("'columns' => '{$modelColumn2}',", 3);
		$out.= $this->_rl("'refTableClass' => 'Model_{$modelId2}',", 3);
		$out.= $this->_rl("'refColumns' => 'id'", 3);
		$out.= $this->_rl(")", 2);
		$out.= $this->_rl(");", 1, 2);

		$out.= $this->_rl("public function init() {", 1);
		$out.= $this->_rl("parent::init();", 2);
		$out.= $this->_rl("}", 1);
		$out.= $this->_rl("}", 0);

		return $out;
	}


	protected function _renderBehavior(Garp_Model_Spawn_Behavior $behavior) {
		$paramsString = is_array($behavior->params) ?
			Garp_Model_Spawn_Util::array2phpStatement($behavior->params) :
			null
		;
		return "\$this->registerObserver(new Garp_Model_{$behavior->type}_{$behavior->name}({$paramsString}));";
	}


	/**
	 * Render line with tabs and newlines
	 */
	protected function _rl($content, $tabs = 0, $newlines = 1) {
		return str_repeat("\t", $tabs).$content.str_repeat("\n", $newlines);
	}
}